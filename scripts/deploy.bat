@echo off
REM ========================================
REM SCRIPT DE D√âPLOIEMENT GECC (Windows)
REM ========================================
REM Ce script automatise le d√©ploiement de l'application GECC sur Windows

setlocal enabledelayedexpansion

REM Variables par d√©faut
set ENVIRONMENT=dev
set BACKEND_ONLY=false
set FRONTEND_ONLY=false
set CHECK_ONLY=false
set DRY_RUN=false
set SKIP_TESTS=false
set SKIP_MIGRATION=false

REM Parser les arguments
:parse_args
if "%~1"=="" goto :main
if "%~1"=="-h" goto :show_help
if "%~1"=="--help" goto :show_help
if "%~1"=="-e" (
    set ENVIRONMENT=%~2
    shift
    shift
    goto :parse_args
)
if "%~1"=="--env" (
    set ENVIRONMENT=%~2
    shift
    shift
    goto :parse_args
)
if "%~1"=="-b" (
    set BACKEND_ONLY=true
    shift
    goto :parse_args
)
if "%~1"=="--backend-only" (
    set BACKEND_ONLY=true
    shift
    goto :parse_args
)
if "%~1"=="-f" (
    set FRONTEND_ONLY=true
    shift
    goto :parse_args
)
if "%~1"=="--frontend-only" (
    set FRONTEND_ONLY=true
    shift
    goto :parse_args
)
if "%~1"=="-c" (
    set CHECK_ONLY=true
    shift
    goto :parse_args
)
if "%~1"=="--check" (
    set CHECK_ONLY=true
    shift
    goto :parse_args
)
if "%~1"=="-d" (
    set DRY_RUN=true
    shift
    goto :parse_args
)
if "%~1"=="--dry-run" (
    set DRY_RUN=true
    shift
    goto :parse_args
)
if "%~1"=="--skip-tests" (
    set SKIP_TESTS=true
    shift
    goto :parse_args
)
if "%~1"=="--skip-migration" (
    set SKIP_MIGRATION=true
    shift
    goto :parse_args
)
echo [ERROR] Option inconnue: %~1
goto :show_help

:show_help
echo Usage: %0 [OPTIONS]
echo.
echo Options:
echo   -h, --help              Afficher cette aide
echo   -e, --env ENV           Environnement (dev, staging, prod)
echo   -b, --backend-only      D√©ployer seulement le backend
echo   -f, --frontend-only     D√©ployer seulement le frontend
echo   -c, --check             V√©rifier la configuration avant d√©ploiement
echo   -d, --dry-run           Simulation du d√©ploiement
echo   --skip-tests            Ignorer les tests
echo   --skip-migration        Ignorer les migrations de base de donn√©es
echo.
echo Exemples:
echo   %0 -e prod              D√©ployer en production
echo   %0 -b -e staging        D√©ployer seulement le backend en staging
echo   %0 -c                   V√©rifier la configuration
goto :eof

:log_info
echo [INFO] %~1
goto :eof

:log_success
echo [SUCCESS] %~1
goto :eof

:log_warning
echo [WARNING] %~1
goto :eof

:log_error
echo [ERROR] %~1
goto :eof

:check_prerequisites
call :log_info "üîç V√©rification des pr√©requis..."

REM V√©rifier Git
git --version >nul 2>&1
if errorlevel 1 (
    call :log_error "Git n'est pas install√©"
    exit /b 1
)

REM V√©rifier Node.js
node --version >nul 2>&1
if errorlevel 1 (
    call :log_error "Node.js n'est pas install√©"
    exit /b 1
)

REM V√©rifier npm
npm --version >nul 2>&1
if errorlevel 1 (
    call :log_error "npm n'est pas install√©"
    exit /b 1
)

REM V√©rifier que nous sommes dans un repository Git
git rev-parse --git-dir >nul 2>&1
if errorlevel 1 (
    call :log_error "Ce r√©pertoire n'est pas un repository Git"
    exit /b 1
)

call :log_success "‚úÖ Pr√©requis v√©rifi√©s"
goto :eof

:check_configuration
call :log_info "üîß V√©rification de la configuration..."

REM V√©rifier les fichiers de configuration
if not exist "package.json" (
    call :log_error "package.json manquant"
    exit /b 1
)

if not exist "server\package.json" (
    call :log_error "server\package.json manquant"
    exit /b 1
)

REM V√©rifier les fichiers d'environnement
if not exist "env.example" (
    call :log_warning "env.example manquant"
)

if not exist "server\env.example" (
    call :log_warning "server\env.example manquant"
)

call :log_success "‚úÖ Configuration v√©rifi√©e"
goto :eof

:install_dependencies
call :log_info "üì¶ Installation des d√©pendances..."

if "%BACKEND_ONLY%"=="false" (
    call :log_info "Installation des d√©pendances frontend..."
    if "%DRY_RUN%"=="false" (
        npm install
    )
)

if "%FRONTEND_ONLY%"=="false" (
    call :log_info "Installation des d√©pendances backend..."
    if "%DRY_RUN%"=="false" (
        cd server
        npm install
        cd ..
    )
)

call :log_success "‚úÖ D√©pendances install√©es"
goto :eof

:run_tests
if "%SKIP_TESTS%"=="true" (
    call :log_info "‚è≠Ô∏è Tests ignor√©s"
    goto :eof
)

call :log_info "üß™ Ex√©cution des tests..."

if "%BACKEND_ONLY%"=="false" (
    call :log_info "Tests frontend..."
    if "%DRY_RUN%"=="false" (
        call :log_info "Aucun test frontend configur√©"
    )
)

if "%FRONTEND_ONLY%"=="false" (
    call :log_info "Tests backend..."
    if "%DRY_RUN%"=="false" (
        cd server
        npm run test >nul 2>&1
        if errorlevel 1 (
            call :log_warning "‚ö†Ô∏è Tests backend non configur√©s ou √©chou√©s"
        ) else (
            call :log_success "‚úÖ Tests backend r√©ussis"
        )
        cd ..
    )
)

call :log_success "‚úÖ Tests termin√©s"
goto :eof

:build_application
call :log_info "üî® Build de l'application..."

if "%BACKEND_ONLY%"=="false" (
    call :log_info "Build frontend..."
    if "%DRY_RUN%"=="false" (
        call :log_info "Frontend statique, pas de build n√©cessaire"
    )
)

if "%FRONTEND_ONLY%"=="false" (
    call :log_info "Build backend..."
    if "%DRY_RUN%"=="false" (
        call :log_info "Backend Node.js, pas de build n√©cessaire"
    )
)

call :log_success "‚úÖ Build termin√©"
goto :eof

:run_migrations
if "%SKIP_MIGRATION%"=="true" (
    call :log_info "‚è≠Ô∏è Migrations ignor√©es"
    goto :eof
)

if "%FRONTEND_ONLY%"=="true" (
    call :log_info "‚è≠Ô∏è Migrations ignor√©es (frontend seulement)"
    goto :eof
)

call :log_info "üóÑÔ∏è Ex√©cution des migrations..."

if "%DRY_RUN%"=="false" (
    cd server
    npm run migrate >nul 2>&1
    if errorlevel 1 (
        call :log_warning "‚ö†Ô∏è Migrations non configur√©es ou √©chou√©es"
    ) else (
        call :log_success "‚úÖ Migrations ex√©cut√©es"
    )
    cd ..
) else (
    call :log_info "Simulation: npm run migrate"
)

goto :eof

:deploy_application
call :log_info "üöÄ D√©ploiement de l'application..."

if "%DRY_RUN%"=="true" (
    call :log_info "Mode simulation - aucun d√©ploiement r√©el"
    call :log_info "Commandes qui seraient ex√©cut√©es:"
    call :log_info "  git add ."
    call :log_info "  git commit -m 'Deploy to %ENVIRONMENT%'"
    call :log_info "  git push origin main"
    goto :eof
)

REM Commit des changements
call :log_info "Commit des changements..."
git add .
git commit -m "Deploy to %ENVIRONMENT% - %date% %time%" || call :log_warning "Aucun changement √† commiter"

REM Push vers le repository
call :log_info "Push vers le repository..."
git push origin main

call :log_success "‚úÖ D√©ploiement initi√©"
call :log_info "Le d√©ploiement sera g√©r√© par les plateformes de d√©ploiement connect√©es"
goto :eof

:post_deployment_check
call :log_info "üîç V√©rification post-d√©ploiement..."

if "%DRY_RUN%"=="false" (
    call :log_info "Attente de 30 secondes pour le d√©ploiement..."
    timeout /t 30 /nobreak >nul
)

call :log_success "‚úÖ V√©rification post-d√©ploiement termin√©e"
goto :eof

:main
call :log_info "üéØ D√©but du processus de d√©ploiement GECC"
call :log_info "Environnement: %ENVIRONMENT%"
call :log_info "R√©pertoire: %CD%"

REM V√©rifications pr√©liminaires
call :check_prerequisites
if errorlevel 1 exit /b 1

call :check_configuration
if errorlevel 1 exit /b 1

if "%CHECK_ONLY%"=="true" (
    call :log_success "‚úÖ V√©rification termin√©e - tout est pr√™t pour le d√©ploiement"
    exit /b 0
)

REM Processus de d√©ploiement
call :install_dependencies
call :run_tests
call :build_application
call :run_migrations
call :deploy_application
call :post_deployment_check

call :log_success "üéâ D√©ploiement termin√© avec succ√®s!"
call :log_info "Environnement: %ENVIRONMENT%"
if "%FRONTEND_ONLY%"=="true" (
    call :log_info "Backend: Ignor√©"
) else (
    call :log_info "Backend: D√©ploy√©"
)
if "%BACKEND_ONLY%"=="true" (
    call :log_info "Frontend: Ignor√©"
) else (
    call :log_info "Frontend: D√©ploy√©"
)

endlocal
