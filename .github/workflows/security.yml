name: 🔒 Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Chaque lundi à 2h du matin

env:
  NODE_VERSION: '18'

jobs:
  # ========================================
  # AUDIT DE SÉCURITÉ
  # ========================================
  security-audit:
    name: 🔍 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm install
          cd server && npm install

      - name: 🔍 NPM Audit (Frontend)
        run: |
          npm audit --audit-level moderate --json > frontend-audit.json || true
          npm audit --audit-level moderate

      - name: 🔍 NPM Audit (Backend)
        run: |
          cd server
          npm audit --audit-level moderate --json > ../backend-audit.json || true
          npm audit --audit-level moderate

      - name: 📊 Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            frontend-audit.json
            backend-audit.json

  # ========================================
  # ANALYSE DE CODE
  # ========================================
  code-analysis:
    name: 🔍 Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: |
          npm install
          cd server && npm install

      - name: 🔍 ESLint Security Plugin
        run: |
          cd server
          npx eslint-plugin-security || echo "Plugin de sécurité non installé"

      - name: 🔍 Check for hardcoded secrets
        run: |
          # Vérifier les mots de passe en dur
          if grep -r "password.*=" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "⚠️ Mots de passe potentiels détectés"
          fi
          
          # Vérifier les clés API en dur
          if grep -r "api.*key.*=" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "⚠️ Clés API potentielles détectées"
          fi

  # ========================================
  # VULNÉRABILITÉS
  # ========================================
  vulnerability-scan:
    name: 🛡️ Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: |
          npm install
          cd server && npm install

      - name: 🛡️ Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🛡️ OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'GECC'
          path: '.'
          format: 'JSON'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

  # ========================================
  # CONFIGURATION SÉCURISÉE
  # ========================================
  security-config:
    name: ⚙️ Security Configuration
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check .env files
        run: |
          # Vérifier qu'aucun fichier .env n'est commité
          if find . -name ".env" -not -path "./.git/*"; then
            echo "❌ Fichiers .env détectés dans le repository"
            exit 1
          fi
          echo "✅ Aucun fichier .env commité"

      - name: 🔍 Check .gitignore
        run: |
          # Vérifier que .gitignore contient les bonnes exclusions
          if ! grep -q "\.env" .gitignore; then
            echo "❌ .env non exclu dans .gitignore"
            exit 1
          fi
          echo "✅ .gitignore correctement configuré"

      - name: 🔍 Check for secrets in code
        run: |
          # Vérifier les patterns de secrets communs
          if grep -r "sk_live_" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Clés Stripe en dur détectées"
            exit 1
          fi
          
          if grep -r "AKIA" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Clés AWS en dur détectées"
            exit 1
          fi
          
          echo "✅ Aucun secret détecté dans le code"

  # ========================================
  # RAPPORT DE SÉCURITÉ
  # ========================================
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, code-analysis, vulnerability-scan, security-config]
    if: always()
    steps:
      - name: 📥 Download audit results
        uses: actions/download-artifact@v4
        with:
          name: security-audit-results
          path: ./audit-results

      - name: 📊 Generate security report
        run: |
          echo "# 🔒 Rapport de Sécurité GECC" > security-report.md
          echo "" >> security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📋 Résumé" >> security-report.md
          echo "- Audit NPM: ${{ needs.security-audit.result }}" >> security-report.md
          echo "- Analyse de code: ${{ needs.code-analysis.result }}" >> security-report.md
          echo "- Scan de vulnérabilités: ${{ needs.vulnerability-scan.result }}" >> security-report.md
          echo "- Configuration: ${{ needs.security-config.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 🔍 Détails" >> security-report.md
          if [ -f "./audit-results/frontend-audit.json" ]; then
            echo "### Frontend Audit" >> security-report.md
            cat ./audit-results/frontend-audit.json >> security-report.md
            echo "" >> security-report.md
          fi
          
          if [ -f "./audit-results/backend-audit.json" ]; then
            echo "### Backend Audit" >> security-report.md
            cat ./audit-results/backend-audit.json >> security-report.md
            echo "" >> security-report.md
          fi

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: 📢 Comment PR with security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
